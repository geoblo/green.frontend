1. ErrorBoundary.js
에러가 났을때 보여줄 페이지 작성


2. useEffect
- 실행되는 조건? componentDidMount 와 componentDidUpdate , componentWillUnmount 가 합쳐진 것
:React는 effect가 수행되는 시점에 이미 DOM이 업데이트되었음을 보장합니다.

1) 마운트 됐을 때 (처음 나타났을 때)
2) 업데이트 됐을 때 (특정 props나 state 가 바뀔 때)
3) 언마운트 됐을 때 (사라질 때)

- 매개변수
1) 첫번째 매개변수에 실행할 effect 함수
2) 두번째 매개변수에 (의존값: dependency) 배열 
: 처음 렌더링 될때만 실행하고 싶으면 빈배열을 넣어줌)
: 배열 내에 여러 개의 값이 있다면 그중의 단 하나만 다를지라도 React는 effect를 재실행합니다.
: 이것은 정리(clean-up)를 사용하는 effect의 경우에도 동일하게 작용합니다.

- 뒷정리 함수(clean-up)
: useEffect 에 대한 뒷정리를 해준다.
: deps 가 비어있는 경우에는 컴포넌트가 사라질 때 cleanup 함수가 호출
: deps 안에 특정 값이 있다면 언마운트시에도 호출이되고, 값이 바뀌기 직전에도 호출이 됩니다.

**심화1
숙련된 자바스크립트 개발자라면 useEffect에 전달된 함수가 모든 렌더링에서 다르다는 것을 알아챘을지도 모릅니다.
이는 의도된 것으로서, count 값이 제대로 업데이트 되는지에 대한 걱정 없이 effect 내부에서 그 값을 읽을 수 있게 하는 부분이기도 합니다.
리렌더링하는 때마다 모두 이전과 다른 effect로 교체하여 전달합니다.
이 점이 렌더링의 결과의 한 부분이 되게 만드는 점인데, 각각의 effect는 특정한 렌더링에 속합니다.

**심화2
effect에서 함수를 반환하는 이유는 무엇일까요?
이는 effect를 위한 추가적인 정리(clean-up) 메커니즘입니다.
모든 effect는 정리를 위한 함수를 반환할 수 있습니다.
이 점이 구독(subscription)의 추가와 제거를 위한 로직을 가까이 묶어둘 수 있게 합니다.
구독(subscription)의 추가와 제거가 모두 하나의 effect를 구성하는 것입니다.

**심화3
React가 effect를 정리(clean-up)하는 시점은 정확히 언제일까요?
React는 컴포넌트가 마운트 해제되는 때에 정리(clean-up)를 실행합니다.
하지만 위의 예시에서 보았듯이 effect는 한번이 아니라 렌더링이 실행되는 때마다 실행됩니다.
React가 다음 차례의 effect를 실행하기 전에 이전의 렌더링에서 파생된 effect 또한 정리하는 이유가 바로 이 때문입니다. 

**심화4
State Hook을 여러 번 사용할 수 있는 것처럼 effect 또한 여러 번 사용할 수 있습니다. Effect를 이용하여 서로 관련이 없는 로직들을 갈라놓을 수 있습니다.
Hook을 이용하면 생명주기 메서드에 따라서가 아니라 코드가 무엇을 하는지에 따라 나눌 수가 있습니다.
React는 컴포넌트에 사용된 모든 effect를 지정된 순서에 맞춰 적용합니다.

**심화5 (순서 매우 중요, 이전의 effect clean-up이 동작하고 그 다음 effect 실행)
다음의 effect를 적용하기 전에 이전의 effect는 정리(clean-up)합니다. 

// { friend: { id: 100 } } state을 사용하여 마운트합니다.
ChatAPI.subscribeToFriendStatus(100, handleStatusChange);     // 첫번째 effect가 작동합니다.

// { friend: { id: 200 } } state로 업데이트합니다.
ChatAPI.unsubscribeFromFriendStatus(100, handleStatusChange); // 이전의 effect를 정리(clean-up)합니다.
ChatAPI.subscribeToFriendStatus(200, handleStatusChange);     // 다음 effect가 작동합니다.

// { friend: { id: 300 } } state로 업데이트합니다.
ChatAPI.unsubscribeFromFriendStatus(200, handleStatusChange); // 이전의 effect를 정리(clean-up)합니다.
ChatAPI.subscribeToFriendStatus(300, handleStatusChange);     // 다음 effect가 작동합니다.

// 마운트를 해제합니다.
ChatAPI.unsubscribeFromFriendStatus(300, handleStatusChange); // 마지막 effect를 정리(clean-up)합니다.

이러한 방식으로 동작하는 것이 일관성을 유지해주며 클래스 컴포넌트에서는 흔히 업데이트 로직을 빼먹으면서 발생할 수 있는 버그를 예방합니다


3. useReducer
: 다양한 상황에 따라 다양한 상태를 다른값으로 업데이트 하고 싶을 때 사용
: 나중에 배울 redux랑 비슷
: 장점: 컴포넌트 로직을 컴포넌트와 분리 시킬 수 있음


4. useMemo
: 렌더링 하는 과정에서 특정 값이 바뀔때만 연산을 실행, 아닐때는 연산한 값 재사용


5. useCallback
: 컴포넌트가 리렌더링 될때마다 새로 만들어진 함수를 사용하게 된다.
: 두번째 인자로 빈 배열을 넣어줘서 컴포넌트가 처음 렌더링 될때만 함수 생성
: 두번째 인자에 값이 있는 배열을 넣어주면 값이 바뀔때만 함수 생성


6. useRef
: DOM 직접제어
: 렌더링과 상관없는 지역변수 만들때
(컴포넌트 안에서 조회 및 수정 할 수 있는 변수를 관리)


7. 커스텀 훅 만들기 연습 (useInputs)
