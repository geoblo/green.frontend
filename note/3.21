1. 재귀함수
스스로 자기자신을 다시 호출하는 함수

2. 함수 스코프 / 전역변수와 지역변수
함수 바깥에서는 전역 변수
함수 안은 지역 변수

지역은 항상 {} 블럭안에서만 유효!!!

3. 즉시 실행함수
(function() {
  ~~~;
}());

4. JS ES6차
1) 템플릿 리터럴: 벡틱(``)을 이용하여 문자열과 변수를 혼합 가능!
${변수명} => 변수 출력 가능

2) 화살표 함수(arrow function)
// ES6 화살표 함수
const myFunc2 = (name) => {
  return name;
}
console.log(myFunc2('김하서')); 

// 매개변수가 1개이면 괄호 생략 가능
const myFunc3 = name => name;
console.log(myFunc3('김하서')); 

// 리턴값만 있다면 {} 및 'return' 키워드를 사용하지 않아도 됩니다
const myFunc3 = name => name;
console.log(myFunc3('김하서')); 

// 객체를 리턴할 경우 괄호를 사용한다.
const myFunc4 = () => ({ a: "one", b: "two" });
console.log(myFunc4());

3) 배열의 filter 함수: 주어진 함수를 통과하는 모든 요소를 모아 새로운 배열로 반환
// ES5
var val = words.filter(function (word, index, array) {
  return word.length > 6;
});

// ES6
const result = words.filter(word => word.length > 6);

4) 배열의 map 함수: 배열 내의 모든 요소 각각에 대하여 주어진 함수를 수행한 결과를 모아 새로운 배열을 반환
// ES5
const array1 = [1, 4, 9, 16];
let arr1 = array1.map(function(item) {
  return item * 2;
});

// ES6
let arr2 = array1.map((item) => item * 2);

5) 배열의 forEach도 같이 공부!!!

6) 파라미터에 디폴트 값 주기
const myFunc2 = (name, age = 22) => {
  return `안녕 ${name} 너의 나이는 ${age}살 이니?`; 
};
console.log(myFunc2('영희'));

7) 배열과 객체의 표현 방식 변화(비구조화 할당)
/*
  값을 각각 할당해야 하는 ES5과 달리 객체의 속성을 얻기 위해 값을 중괄호안에 넣는다.
*/
const contacts = {
  famillyName: '이',
  name: '영희',
  age: 22
};

let { famillyName, name, age } = contacts;

/*
  속성 이름과 동일하지 않은 변수를 할당하면 undefined가 반환. 
  변수의 이름을 바꾸려면 :을 대신 사용.
*/
const contacts = {
  famillyName: '이',
  name: '영희',
  age: 22
};

let { famillyName, name: ontherName, age } = contacts;
console.log(ontherName);

/*
  배열의 경우 객체와 동일한 구문을 사용. 중괄호를 대괄호로 변경.
*/
const arr = ['광희', '지수', '영철', 20];

let [value1, value2, value3] = arr;

console.log(value1);
console.log(value2);
console.log(value3);

8) rest parameter와 스프레드 연산자(Spread operator)
...rest: 배열의 비구조화 할당 시 나머지 값들을 배열로 한번에 받아옴 (rest 말고 다른 명칭을 써도 되나 rest로 쓰는것이 일반적!)

/*
  Spread operator는 Rest parameter와 구문이 동일하지만 
  Spread operator는 인수뿐만 아니라 배열 자체를 가짐.
  for 반복문이나 다른 메서드를 사용하는 대신 Spread operator를 
  사용하여 배열의 값을 가져올 수 있음.
  기존의 것은 건드리지 않고 이전에 사용했던것을 그대로 가져옴
*/
// ex1
// const arr = ['영희', 20, '열성적인 자바스크립트', '안녕', '지수', '어떻게 지내니?'];

// const Func = (...anArray) => { // anArray = [anArray]; 즉, 배열 전체를 새로운 배열에 넣어 반환
//   return anArray;
// };

// console.log(Func(arr));


// ex2
// const student = {
//   name: '영희'
// };

// const class1 = {
//   ...student,
//   subject: 'kor'
// };

// const class2 = {
//   ...class1,
//   day: 'monday'
// };

// console.log(student);
// console.log(class1);
// console.log(class2);


5. 객체 = 함수(메소드) + 속성
1) 일반 function 형태의 객체

2) prototype(원형) 형태의 객체
1) 번의 형태가 메모리를 계속 잡아 먹으므로 => 메모리 낭비
메모리 절약을 위해 쓰는 2) 번의 형태

=> 교재 보고 다시 개념 공부!!!

3) ES6차 class 형태의 객체
// 클래스를 사용해 객체지향화 할수있다(이전의 prototype과 같다.)







