1. Array의 인스턴스 메서드
-does not change the original array.
join: 요소를 합쳐서 문자열로 리턴 ([separator]) 를 안써주면 기본값 ,
concat: 2개의 배열을 합쳐서 하나의 새로운 배열로 리턴
slice: 배열을 처음 포지션부터 마지막 포지션 - 1 자리까지 자름

- overwrites the original array. / changes the original array.
sort: 요소를 정렬
reverse: 요소의 순서를 반대로 
splice(2, 1, "서초", "역삼") : 2번째 인덱스부터 1개를 지우고 "서초","역삼"을 그자리에 넣음, 리턴값은 잘라온 배열을 리턴함
pop: 마지막 요소 한개 제거, 제거된 요소 리턴
shift: 첫번째 요소 한개 제거, 제거된 요소 리턴
push: 배열의 마지막에 새 아이템들 추가, 새로운 배열의 길이 값을 리턴
unshift: 배열의 처음에 새 아이템들 추가, 새로운 배열의 길이 값을 리턴


**배열 복사하기
let shallowCopySpread = [...fruits]
// ["딸기", "망고"]

위 코드는 전개 구문을 사용해 배열의 얕은 복사를 만드는 방법입니다. 배열을 복사하는 다른 방법은 아래의 배열 복사하기에서 논의합니다.
https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array#%EB%B0%B0%EC%97%B4_%EB%B3%B5%EC%82%AC%ED%95%98%EA%B8%B0


2. String 객체
let str = "abc";
let str = new String("abc"); 
=> 문자열 원형과 String 객체의 차이가 존재함.
그러나 너무 많이 쓰이니까 첫번째 표현식처럼 축약해서 씀.

문자열도 하나의 배열이기에 iterator 반복문을 돌릴수 있다.


3. The Differense Between
String search() and String indexOf()
The search() cannot take a start position argument.

The indexOf() method cannot search against a regular expression.

4. The Differense Between
String search() and String match()
The search() method returns the position of the first match.

The match() method returns an array of matches.

5. userEmail.indexOf("@") > 0 : -1이면 없다는것

6. window 객체 : 브라우저 객체의 최상위 객체
open, setInterval/clearInterval, setTimeout/clearTimeout

1) screen 객체: 사용자의 (디바이스별) 모니터 정보를 제공
2) location 객체 : 사용자 브라우저 주소창쪽 속성과 기능 제공
3) history 객체 : 사용자가 방문한 페이지의 기록
4) navigator 객체 : 현재 방문자가 사용하는 브라우저 정보와 운영체제 정보를 제공
5) document 객체 - DOM

7. JS 함수
1) ES5 함수 정의 ver1
function add(a, b) {
  return a + b;
}

2) ES5 함수 정의 ver2
let addFunc = function(a, b) {
  return a + b;
}

3) ES6 함수 정의
let addFunc2 = (a, b) => {
  return a + b;
}

줄여서 아래와 같이 쓸 수 있다.
let addFunc2 = (a, b) => a + b;

let result1 = add(1, 2);
let result2 = addFunc(1, 2);
let result3 = addFunc2(1, 2);

8. 호이스팅
: 끌어올리다.

let result1 = add(1, 2);
let result2 = addFunc(1, 2); // 초기화 전에 함수에 접근 안됨, 변수에 넣었기떄문에 변수가 선언되기 전에 부를수가 없는 원리?
let result3 = addFunc2(1, 2); // 초기화 전에 함수에 접근 안됨, 위와 동일로 추측

function add(a, b) {
  return a + b;
}
let addFunc = function(a, b) {
  return a + b;
}
let addFunc2 = (a, b) => {
  return a + b;
}

9. arguments
: 파라미터를 안쓰고도 불러올수 있다. (배열형식으로)

function sum() {
   arguments[0] + arguments[1] + arguments[2]
}

sum(a, b, c);

10. 함수에서 return문
: 리턴문을 만나면 함수를 빠져나간다. 리턴 밑에 코드 쓰지 말것!















